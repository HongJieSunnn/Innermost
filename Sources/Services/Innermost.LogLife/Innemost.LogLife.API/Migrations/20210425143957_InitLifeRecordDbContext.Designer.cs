// <auto-generated />
using System;
using Innermost.LogLife.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Innemost.LogLife.API.Migrations
{
    [DbContext(typeof(LifeRecordDbContext))]
    [Migration("20210425143957_InitLifeRecordDbContext")]
    partial class InitLifeRecordDbContext
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("Innermost.LogLife.Domain.AggregatesModel.LifeRecordAggregate.LifeRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(95) CHARACTER SET utf8mb4")
                        .HasDefaultValue("/记录时刻")
                        .HasColumnName("Path");

                    b.Property<DateTime>("PublishTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("PublishTime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("Text")
                        .HasCharSet("utf8mb4");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasColumnName("Title");

                    b.Property<bool>("_isShared")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsShared");

                    b.Property<int>("_locationId")
                        .HasColumnType("int")
                        .HasColumnName("LocationId");

                    b.Property<int>("_musicRecordId")
                        .HasColumnType("int")
                        .HasColumnName("MusicRecordId");

                    b.Property<int>("_textTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TextTypeId");

                    b.HasKey("Id");

                    b.HasIndex("Path");

                    b.HasIndex("PublishTime");

                    b.HasIndex("_locationId");

                    b.HasIndex("_musicRecordId");

                    b.HasIndex("_textTypeId");

                    b.ToTable("LifeRecord");
                });

            modelBuilder.Entity("Innermost.LogLife.Domain.AggregatesModel.LifeRecordAggregate.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasColumnName("City");

                    b.Property<string>("County")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasColumnName("County");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasColumnName("Place");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasColumnName("Province");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasColumnName("Town");

                    b.HasKey("Id");

                    b.HasAlternateKey("Province", "City", "County", "Town", "Place");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Innermost.LogLife.Domain.AggregatesModel.LifeRecordAggregate.MusicRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Album")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasColumnName("Album");

                    b.Property<string>("MusicName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasColumnName("MusicName");

                    b.Property<string>("Singer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasColumnName("Singer");

                    b.HasKey("Id");

                    b.ToTable("MusicRecord");
                });

            modelBuilder.Entity("Innermost.LogLife.Domain.AggregatesModel.LifeRecordAggregate.TextType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("TextTypeName");

                    b.HasKey("Id");

                    b.ToTable("TextType");
                });

            modelBuilder.Entity("Innermost.LogLife.Infrastructure.Idempotency.ClientRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("ClientRequest");
                });

            modelBuilder.Entity("Innermost.LogLife.Domain.AggregatesModel.LifeRecordAggregate.LifeRecord", b =>
                {
                    b.HasOne("Innermost.LogLife.Domain.AggregatesModel.LifeRecordAggregate.Location", "Location")
                        .WithMany()
                        .HasForeignKey("_locationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Innermost.LogLife.Domain.AggregatesModel.LifeRecordAggregate.MusicRecord", "MusicRecord")
                        .WithMany()
                        .HasForeignKey("_musicRecordId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Innermost.LogLife.Domain.AggregatesModel.LifeRecordAggregate.TextType", "TextType")
                        .WithMany()
                        .HasForeignKey("_textTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("MusicRecord");

                    b.Navigation("TextType");
                });
#pragma warning restore 612, 618
        }
    }
}
